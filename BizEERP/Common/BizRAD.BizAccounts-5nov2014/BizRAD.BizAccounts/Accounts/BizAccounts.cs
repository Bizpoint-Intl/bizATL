// Generated by Reflector from C:\Projects\Transview\Leonian\Common\Ori Dlls\BizRAD.BizAccounts.dll
namespace BizRAD.BizAccounts
{
    using BizRAD.BizCommon;
    using BizRAD.DB.Client;
    using BizRAD.DB.Interface;
    using System;
    using System.Collections;
    using System.Data;
    using System.Windows.Forms;

    public class BizAccounts
    {
        public static void CalTrnDiff(DBAccess dbAccess, string refnum, string dataTableName, string Clause1, string Clause2, string Clause3)
        {
            if ((refnum == string.Empty) || (dataTableName == string.Empty))
            {
                MessageBox.Show("refnum and dataTableName cannot be empty", "Bizpoint International Pte Ltd", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
            else if (((Clause1 == string.Empty) || (Clause2 == string.Empty)) || (Clause3 == string.Empty))
            {
                MessageBox.Show("Clause1, Clause2 and Clause3 cannot be empty", "Bizpoint International Pte Ltd", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
            else
            {
                try
                {
                    DataTable table = dbAccess.DataSet.Tables[dataTableName];
                    foreach (DataRow row in table.Rows)
                    {
                        if (row.RowState != DataRowState.Deleted)
                        {
                            string str = dataTableName + Common.DEFAULT_SYSTEM_YEAR;
                            string str2 = "";
                            string str3 = "";
                            string str4 = "";
                            Hashtable selectsCollection = new Hashtable();
                            str3 = "invnum,SUM(oriamt) AS oriInv,SUM(postamt) AS postInv,SUM(oriamt*0) AS oriamt,SUM(oriamt*0) AS postamt,SUM(oriamt*0) AS oriTmp,SUM(oriamt*0) AS postTmp,SUM(oriamt*0) AS exramt,0 AS advtype";
                            str4 = Clause1 + " AND " + Clause2 + " AND refnum<>'" + refnum + "' AND invnum='" + row["invnum"].ToString().Trim() + "'";
                            str2 = "SELECT " + str3 + " FROM " + str + " WHERE advtype<>1 AND " + str4 + " GROUP BY invnum ";
                            selectsCollection.Add("dt1", str2);
                            str3 = "invnum,SUM(oriamt*0) AS oriInv,SUM(oriamt*0) AS postInv,SUM(oriamt) AS oriamt,SUM(postamt+exramt) AS postamt,SUM(oriamt*0) AS oriTmp,SUM(oriamt*0) AS postTmp,SUM(oriamt*0) AS exramt,0 AS advtype";
                            str4 = Clause1 + " AND " + Clause3 + " AND refnum<>'" + refnum + "' AND invnum='" + row["invnum"].ToString().Trim() + "'";
                            str2 = "SELECT " + str3 + " FROM " + str + " WHERE advtype<>1 AND " + str4 + " GROUP BY invnum ";
                            selectsCollection.Add("dt2", str2);
                            str3 = "invnum,SUM(oriamt) AS oriInv,SUM(postamt) AS postInv,SUM(oriamt*0) AS oriamt,SUM(oriamt*0) AS postamt,SUM(oriamt*0) AS oriTmp,SUM(oriamt*0) AS postTmp,SUM(oriamt*0) AS exramt,1 AS advtype";
                            str4 = Clause1 + " AND " + Clause3 + " AND refnum<>'" + refnum + "' AND invnum='" + row["invnum"].ToString().Trim() + "'";
                            str2 = "SELECT " + str3 + " FROM " + str + " WHERE advtype=1 AND " + str4 + " GROUP BY invnum ";
                            selectsCollection.Add("dt3", str2);
                            DataSet ds = dbAccess.ReadSQLTemp(selectsCollection);
                            DataTable table2 = new DataTable("dtTmp");
                            table2.Columns.Add("invnum", Type.GetType("System.String"));
                            table2.Columns.Add("oriInv", Type.GetType("System.Decimal"));
                            table2.Columns.Add("postInv", Type.GetType("System.Decimal"));
                            table2.Columns.Add("oriamt", Type.GetType("System.Decimal"));
                            table2.Columns.Add("postamt", Type.GetType("System.Decimal"));
                            table2.Columns.Add("oriTmp", Type.GetType("System.Decimal"));
                            table2.Columns.Add("postTmp", Type.GetType("System.Decimal"));
                            table2.Columns.Add("exramt", Type.GetType("System.Decimal"));
                            table2.Columns.Add("advtype", Type.GetType("System.Int32"));
                            foreach (DataRow row2 in ds.Tables["dt1"].Rows)
                            {
                                if (row2.RowState != DataRowState.Deleted)
                                {
                                    DataRow dataRowTo = table2.Rows.Add(new object[0]);
                                    BizFunctions.UpdateDataRow(row2, dataRowTo, "invnum/oriInv/postInv/oriamt/postamt/oriTmp/postTmp/exramt/advtype");
                                }
                            }
                            foreach (DataRow row4 in ds.Tables["dt2"].Rows)
                            {
                                if (row4.RowState != DataRowState.Deleted)
                                {
                                    DataRow row5 = table2.Rows.Add(new object[0]);
                                    BizFunctions.UpdateDataRow(row4, row5, "invnum/oriInv/postInv/oriamt/postamt/oriTmp/postTmp/exramt/advtype");
                                }
                            }
                            foreach (DataRow row6 in ds.Tables["dt3"].Rows)
                            {
                                if (row6.RowState != DataRowState.Deleted)
                                {
                                    DataRow row7 = table2.Rows.Add(new object[0]);
                                    BizFunctions.UpdateDataRow(row6, row7, "invnum/oriInv/postInv/oriamt/postamt/oriTmp/postTmp/exramt/advtype");
                                }
                            }
                            DataRow row8 = table2.Rows.Add(new object[0]);
                            row8["invnum"] = row["invnum"];
                            row8["oriInv"] = 0;
                            row8["postInv"] = 0;
                            row8["oriamt"] = 0;
                            row8["postamt"] = 0;
                            row8["oriTmp"] = row["oriamt"];
                            row8["postTmp"] = row["postamt"];
                            row8["exramt"] = 0;
                            row8["advtype"] = row["advtype"];
                            int count = ds.Tables.Count;
                            ds.Tables.Add(table2);
                            ds.Tables[count].TableName = "dtTmp";
                            str2 = "SELECT invnum,SUM(oriInv) AS oriInv,SUM(postInv) AS postInv,SUM(oriamt) AS oriamt,SUM(postamt) AS postamt,SUM(oriTmp) AS oriTmp,SUM(postTmp) AS postTmp,SUM(exramt) AS exramt,MAX(advtype) as advtype FROM [dtTmp] GROUP BY invnum ORDER BY invnum";
                            DataTable table3 = BizFunctions.ExecuteQuery(ds, str2);
                            ds.Tables.Remove("dtTmp");
                            if (table3.Rows.Count != 0)
                            {
                                DataRow row9 = table3.Rows[0];
                                if ((((((decimal)row9["oriInv"]) + ((decimal)row9["oriamt"])) + ((decimal)row9["oriTmp"])) == 0M) && (((((decimal)row9["postInv"]) + ((decimal)row9["postamt"])) + ((decimal)row9["postTmp"])) != 0M))
                                {
                                    row["exramt"] = -((((decimal)row9["postInv"]) + ((decimal)row9["postamt"])) + ((decimal)row9["postTmp"]));
                                }
                                else if ((((((decimal)row9["oriInv"]) + ((decimal)row9["oriamt"])) + ((decimal)row9["oriTmp"])) > 0M) && (dataTableName.ToUpper() == "ARD"))
                                {
                                    if (((decimal)row9["oriInv"]) == 0M)
                                    {
                                        row["exramt"] = ((decimal)row9["oriTmp"]) - ((decimal)row9["postTmp"]);
                                    }
                                    else
                                    {
                                        row["exramt"] = BizFunctions.Round((((decimal)row9["oriTmp"]) * ((decimal)row9["postInv"])) / ((decimal)row9["oriInv"])) - ((decimal)row9["postTmp"]);
                                    }
                                }
                                else if ((((((decimal)row9["oriInv"]) + ((decimal)row9["oriamt"])) + ((decimal)row9["oriTmp"])) < 0M) && (dataTableName.ToUpper() == "APD"))
                                {
                                    if (((decimal)row9["oriInv"]) == 0M)
                                    {
                                        row["exramt"] = ((decimal)row9["oriTmp"]) - ((decimal)row9["postTmp"]);
                                    }
                                    else
                                    {
                                        row["exramt"] = BizFunctions.Round((((decimal)row9["oriTmp"]) * ((decimal)row9["postInv"])) / ((decimal)row9["oriInv"])) - ((decimal)row9["postTmp"]);
                                    }
                                }
                                else if (((((((decimal)row9["oriInv"]) + ((decimal)row9["oriamt"])) + ((decimal)row9["oriTmp"])) < 0M) && (dataTableName.ToUpper() == "ARD")) && (((int)row9["advtype"]) == 1))
                                {
                                    if (((decimal)row9["oriInv"]) == 0M)
                                    {
                                        row["exramt"] = ((decimal)row9["oriTmp"]) - ((decimal)row9["postTmp"]);
                                    }
                                    else
                                    {
                                        row["exramt"] = BizFunctions.Round((((decimal)row9["oriTmp"]) * ((decimal)row9["postInv"])) / ((decimal)row9["oriInv"])) - ((decimal)row9["postTmp"]);
                                    }
                                }
                                else if (((((((decimal)row9["oriInv"]) + ((decimal)row9["oriamt"])) + ((decimal)row9["oriTmp"])) > 0M) && (dataTableName.ToUpper() == "APD")) && (((int)row9["advtype"]) == 1))
                                {
                                    if (((decimal)row9["oriInv"]) == 0M)
                                    {
                                        row["exramt"] = ((decimal)row9["oriTmp"]) - ((decimal)row9["postTmp"]);
                                    }
                                    else
                                    {
                                        row["exramt"] = BizFunctions.Round((((decimal)row9["oriTmp"]) * ((decimal)row9["postInv"])) / ((decimal)row9["oriInv"])) - ((decimal)row9["postTmp"]);
                                    }
                                }
                                else
                                {
                                    row["exramt"] = 0;
                                }
                            }
                        }
                    }
                }
                catch (Exception exception)
                {
                    MessageBox.Show(exception.Message + "\n" + exception.StackTrace, "Bizpoint International Pte Ltd", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                }
            }
        }

        public static string GetDefaultAccount(DBAccess dbAccess, string refnum)
        {
            string str = "ACC";
            if (Convert.ToBoolean(Common.DEFAULT_SYSTEM_TABLEINFO["ACC"]))
            {
                str = "ACC" + Common.DEFAULT_SYSTEM_YEAR;
            }
            string str2 = "";
            DataSet set = dbAccess.ReadSQLTemp("BizAccTmp", "SELECT accnum FROM " + str + " WHERE refnum='" + refnum + "'");
            if (set.Tables["BizAccTmp"].Rows.Count != 0)
            {
                str2 = set.Tables["BizAccTmp"].Rows[0]["accnum"].ToString();
            }
            return str2;
        }

        public static string GetDefaultCompany(DBAccess dbAccess)
        {
            string str = "";
            DataSet set = dbAccess.ReadSQLTemp("BizCoyTmp", "SELECT * FROM coy ORDER BY [ID]");
            if (set.Tables["BizCoyTmp"].Rows.Count != 0)
            {
                str = set.Tables["BizCoyTmp"].Rows[0]["coy"].ToString();
            }
            return str;
        }

        public static string GetDefaultCurrency(DBAccess dbAccess)
        {
            DataSet set = dbAccess.ReadSQLTemp("SysYear", "SELECT oricur FROM SysYear WHERE SystemYear='" + Common.DEFAULT_SYSTEM_YEAR + "'");
            if (set.Tables["SysYear"].Rows.Count != 0)
            {
                return set.Tables["SysYear"].Rows[0]["oricur"].ToString().Trim();
            }
            return "SGD";
        }

        public static decimal GetExRate(DBAccess dbAccess, string Currency, DateTime trandate)
        {
            if ((!Convert.IsDBNull(Currency) && !Convert.IsDBNull(trandate)) && (Currency.Trim() != string.Empty))
            {
                string str = "exrd" + Common.DEFAULT_SYSTEM_YEAR;
                string selectClause = "SELECT * FROM " + str + " WHERE oricur='" + Currency + "' AND effectivedate<='" + BizFunctions.GetSafeDateString(trandate) + "' ORDER BY effectivedate DESC";
                DataSet set = dbAccess.ReadSQLTemp("BizExr", selectClause);
                if (set.Tables["Bizexr"].Rows.Count != 0)
                {
                    return (decimal)set.Tables["Bizexr"].Rows[0]["exrate"];
                }
                MessageBox.Show("No Exchange Rate defined for currency '" + Currency + "' for " + trandate.ToShortDateString() + " !", "Bizpoint International Pte Ltd", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
            return 0M;
        }

        public static decimal GetExRate(DBAccess dbAccess, string Currency, int period)
        {
            if ((!Convert.IsDBNull(Currency) && !Convert.IsDBNull(period)) && (Currency.Trim() != string.Empty))
            {
                string str = "exr" + Common.DEFAULT_SYSTEM_YEAR;
                string selectClause = "SELECT rate" + period.ToString() + " as exrate FROM " + str + " WHERE oricur='" + Currency + "'";
                DataSet set = dbAccess.ReadSQLTemp("BizExr", selectClause);
                if (set.Tables["Bizexr"].Rows.Count != 0)
                {
                    return (decimal)set.Tables["Bizexr"].Rows[0]["exrate"];
                }
                MessageBox.Show("No Exchange Rate defined for currency '" + Currency + "' for " + period.ToString() + " !", "Bizpoint International Pte Ltd", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
            return 0M;
        }

        public static decimal GetGstRate(DBAccess dbAccess, DateTime trandate)
        {
            Parameter[] parameters = new Parameter[] { new Parameter("@trandate", BizFunctions.GetSafeDateString(trandate)), new Parameter("@taxrate", 0M) };
            parameters[1].Output = true;
            try
            {
                dbAccess.RemoteStandardSQL.GetStoredProcedureResult("Biz_GetTaxRate", ref parameters);
                return decimal.Parse(parameters[1].ParameterValue.ToString());
            }
            catch (Exception exception)
            {
                MessageBox.Show(exception.Message);
                return 0M;
            }
        }

        public static int GetPeriod(DBAccess dbAccess, DateTime trandate)
        {
            if (!Convert.IsDBNull(trandate))
            {
                DataSet set = dbAccess.ReadSQLTemp("SysDefault", "SELECT DefaultSystemPeriod FROM SysDefault");

                DateTime dt2 = new DateTime(2015, 1, 1);

                DateTime trandateNewFormat = new DateTime(trandate.Year, trandate.Month, trandate.Day);


                if (set.Tables["SysDefault"].Rows.Count != 0)
                {
                    if (trandateNewFormat < dt2)
                    {

                        if (trandate.Year == 2014 && trandate.Month >= 11)
                        {

                            switch (trandate.Month)
                            {

                                case 11:
                                    {
                                        return 13;
                                    }
                                    break;
                                case 12:
                                    {
                                        return 14;
                                    }
                                    break;

                                default:
                                    break;
                            }
                        }
                        else
                        {

                            DataRow row = set.Tables["SysDefault"].Rows[0];
                            return ((((trandate.Month - ((int)11)) + 12) % 12) + 1);

                        }
                    }
                    else
                    {
                        DataRow row = set.Tables["SysDefault"].Rows[0];
                        return trandate.Month;
                    }
                }
                MessageBox.Show("DefaultSystemPeriod not defined in SysDefault !", "Bizpoint International Pte Ltd", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
            return 0;

        }

        public static int GetPeriod(DBAccess dbAccess, DateTime trandate, bool usingPdTable)
        {
            if (!usingPdTable)
            {
                return GetPeriod(dbAccess, trandate);
            }
            if (!Convert.IsDBNull(trandate))
            {
                DataSet set = dbAccess.ReadSQLTemp("BizPD", "SELECT * FROM pd" + Common.DEFAULT_SYSTEM_YEAR + " WHERE pdstart<='" + BizFunctions.GetSafeDateString(trandate) + "' AND pdend>='" + BizFunctions.GetSafeDateString(trandate) + "'");
                if (set.Tables["BizPD"].Rows.Count != 0)
                {
                    return (int)set.Tables["BizPD"].Rows[0]["period"];
                }
                MessageBox.Show("No Period defined for the date " + trandate.ToShortDateString() + " !", "Bizpoint International Pte Ltd", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
            return 0;
        }

        public static void PostFinLgr(DBAccess dbAccess)
        {
            PostFinLgr(dbAccess, "");
        }

        public static void PostFinLgr(DBAccess dbAccess, string extraGrouping)
        {
            if ((dbAccess.DataSet.Tables.Contains("gld") && dbAccess.DataSet.Tables.Contains("csh")) && (dbAccess.DataSet.Tables.Contains("ard") && dbAccess.DataSet.Tables.Contains("apd")))
            {
                BizFunctions.DeleteRow(dbAccess.DataSet.Tables["gld"], "lgr<>'GLD'");
                if (dbAccess.DataSet.Tables["csh"].Rows.Count != 0)
                {
                    PostGL(dbAccess, "CSH", extraGrouping);
                }
                if (dbAccess.DataSet.Tables["ard"].Rows.Count != 0)
                {
                    PostGL(dbAccess, "ARD", extraGrouping);
                }
                if (dbAccess.DataSet.Tables["apd"].Rows.Count != 0)
                {
                    PostGL(dbAccess, "APD", extraGrouping);
                }
            }
            else
            {
                MessageBox.Show("Dataset missing at least one of the following tables:\nGLD, CSH, ARD, APD", "Bizpoint International Pte Ltd", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
        }

        private static void PostGL(DBAccess dbAccess, string tableName, string extraGrouping)
        {
            string sqlcommand = "";
            string str2 = "SELECT accnum,oricur,ccnum,SUM(oriamt) AS oriamt,SUM(oriamt)*(CASE WHEN SUM(oriamt)<0 THEN -1 ELSE 0 END) AS oricredit,SUM(oriamt)*(CASE WHEN SUM(oriamt)>0 THEN 1 ELSE 0 END) AS oridebit,";
            string str3 = (extraGrouping.Trim() == string.Empty) ? "" : ("," + extraGrouping);
            string str4 = "GROUP BY accnum,oricur,ccnum" + str3;
            string text1 = "GROUP BY oricur,ccnum" + str3;
            string str5 = "GROUP BY coy";
            string str6 = "";
            string str7 = tableName;
            if (str7 != null)
            {
                if (!(str7 == "CSH"))
                {
                    if (!(str7 == "ARD"))
                    {
                        if (str7 == "APD")
                        {
                            str2 = str2 + "SUM(postamt+exramt) AS postamt" + str3;
                            str6 = " HAVING SUM(oriamt) <> 0 OR SUM(postamt+exramt) <> 0";
                            sqlcommand = str2 + " FROM [" + tableName + "] " + str4 + str6;
                            PostGLsum(dbAccess, tableName, sqlcommand, extraGrouping);
                            str2 = "SELECT coy,SUM(exramt)*(CASE WHEN SUM(exramt)>0 THEN 1 ELSE 0 END) AS oridebit,SUM(exramt)*(CASE WHEN SUM(exramt)<0 THEN -1 ELSE 0 END) AS oricredit,SUM(-exramt) AS oriamt,SUM(-exramt) AS postamt";
                            str6 = " HAVING SUM(-exramt) != 0";
                            sqlcommand = str2 + " FROM [" + tableName + "] " + str5 + str6;
                            PostGLsum(dbAccess, tableName, sqlcommand, "", GetDefaultAccount(dbAccess, "EXR3"), GetDefaultCurrency(dbAccess));
                        }
                        return;
                    }
                }
                else
                {
                    str2 = str2 + "SUM(postamt-exramt) AS postamt" + str3;
                    str6 = " HAVING SUM(oriamt) <> 0 OR SUM(postamt-exramt) <> 0";
                    sqlcommand = str2 + " FROM [" + tableName + "] " + str4 + str6;
                    PostGLsum(dbAccess, tableName, sqlcommand, extraGrouping);
                    str2 = "SELECT coy,SUM(exramt)*(CASE WHEN SUM(exramt)<0 THEN -1 ELSE 0 END) AS oridebit,SUM(exramt)*(CASE WHEN SUM(exramt)>0 THEN 1 ELSE 0 END) AS oricredit,SUM(exramt) AS oriamt,SUM(exramt) AS postamt";
                    str6 = " HAVING SUM(exramt)<> 0";
                    sqlcommand = str2 + " FROM [" + tableName + "] " + str5 + str6;
                    PostGLsum(dbAccess, tableName, sqlcommand, "", GetDefaultAccount(dbAccess, "EXR1"), GetDefaultCurrency(dbAccess));
                    return;
                }
                str2 = str2 + "SUM(postamt+exramt) AS postamt" + str3;
                str6 = " HAVING SUM(oriamt) <> 0 OR SUM(postamt+exramt) <> 0";
                sqlcommand = str2 + " FROM [" + tableName + "] " + str4 + str6;
                PostGLsum(dbAccess, tableName, sqlcommand, extraGrouping);
                str2 = "SELECT coy,SUM(exramt)*(CASE WHEN SUM(exramt)>0 THEN 1 ELSE 0 END) AS oridebit,SUM(exramt)*(CASE WHEN SUM(exramt)<0 THEN -1 ELSE 0 END) AS oricredit,SUM(-exramt) AS oriamt,SUM(-exramt) AS postamt";
                str6 = " HAVING SUM(-exramt) <> 0";
                sqlcommand = str2 + " FROM [" + tableName + "] " + str5 + str6;
                PostGLsum(dbAccess, tableName, sqlcommand, "", GetDefaultAccount(dbAccess, "EXR2"), GetDefaultCurrency(dbAccess));
            }
        }

        public static void PostGLD(DBAccess dbAccess, string subLedgers, string headerTableName)
        {
            PostGLD(dbAccess, subLedgers, headerTableName, "");
        }

        public static void PostGLD(DBAccess dbAccess, string subLedgers, string headerTableName, string extraGrouping)
        {
            try
            {
                DataTable dataTable = dbAccess.DataSet.Tables["gld"];
                BizFunctions.DeleteAllRows(dataTable);
                DataRow dataRowFrom = dbAccess.DataSet.Tables[headerTableName].Rows[0];
                string sqlcommand = null;
                string str2 = null;
                string str3 = (extraGrouping.Trim() == string.Empty) ? "" : ("," + extraGrouping);
                string str4 = " GROUP BY accnum,oricur,ccnum" + str3;
                string text1 = " GROUP BY ccnum" + str3;
                string str5 = " GROUP BY coy";
                string str6 = null;
                string str7 = null;
                string defaultCurrency = GetDefaultCurrency(dbAccess);
                string text2 = "'" + defaultCurrency + "' AS oricur,";
                char[] separator = " ,/*".ToCharArray();
                foreach (string str10 in subLedgers.Split(separator))
                {
                    if (!dbAccess.DataSet.Tables.Contains(str10))
                    {
                        continue;
                    }
                    str2 = "SELECT accnum,oricur,ccnum,";
                    string str11 = str10.ToUpper();
                    if (str11 == null)
                    {
                        goto Label_016C;
                    }
                    if (!(str11 == "ARD"))
                    {
                        if (str11 == "APD")
                        {
                            goto Label_013E;
                        }
                        if (str11 == "CSH")
                        {
                            goto Label_0155;
                        }
                        goto Label_016C;
                    }
                    str2 = str2 + "SUM(oricredit) AS oricredit,SUM(oridebit) AS oridebit,SUM(oriamt) AS oriamt,SUM(postamt+exramt) AS postamt" + str3;
                    str6 = " HAVING SUM(oriamt)<>0 OR SUM(postamt+exramt)<>0";
                    goto Label_0181;
                Label_013E:
                    str2 = str2 + "SUM(oricredit) AS oricredit,SUM(oridebit) AS oridebit,SUM(oriamt) AS oriamt,SUM(postamt+exramt) AS postamt" + str3;
                    str6 = " HAVING SUM(oriamt)<>0 OR SUM(postamt+exramt)<> 0";
                    goto Label_0181;
                Label_0155:
                    str2 = str2 + "SUM(oricredit) AS oricredit,SUM(oridebit) AS oridebit,SUM(oriamt) AS oriamt,SUM(postamt-exramt) AS postamt" + str3;
                    str6 = " HAVING SUM(oriamt)<>0 OR SUM(postamt-exramt)<>0";
                    goto Label_0181;
                Label_016C:
                    str2 = str2 + "SUM(oriamt)*(CASE WHEN SUM(oriamt)>0 THEN 1 ELSE 0 END) AS oridebit,SUM(oriamt)*(CASE WHEN SUM(oriamt)<0 THEN -1 ELSE 0 END) AS oricredit,SUM(oriamt) AS oriamt,SUM(postamt) AS postamt" + str3;
                    str6 = " HAVING SUM(oriamt)<>0 OR SUM(postamt)<>0";
                Label_0181: ;
                    sqlcommand = str2 + " FROM [" + str10 + "]" + str4 + str6;
                    PostGLsum(dbAccess, str10, sqlcommand, extraGrouping);
                    string str12 = str10.ToUpper();
                    if (str12 != null)
                    {
                        if (!(str12 == "ARD"))
                        {
                            if (str12 == "APD")
                            {
                                goto Label_0315;
                            }
                            if (str12 == "CSH")
                            {
                                goto Label_0400;
                            }
                            if (str12 == "SIV1")
                            {
                                goto Label_04EB;
                            }
                            if (str12 == "PIV1")
                            {
                                goto Label_07A2;
                            }
                        }
                        else
                        {
                            str7 = "-exramt";
                            str2 = "SELECT coy,SUM(" + str7 + ")*(CASE WHEN SUM(" + str7 + ")>0 THEN 1 ELSE 0 END) AS oridebit,SUM(" + str7 + ")*(CASE WHEN SUM(" + str7 + ")<0 THEN -1 ELSE 0 END) AS oricredit,SUM(" + str7 + ") AS oriamt, SUM(" + str7 + ") AS postamt";
                            str6 = " HAVING SUM(" + str7 + ")<>0";
                            sqlcommand = str2 + " FROM [" + str10 + "]" + str5 + str6;
                            PostGLsum(dbAccess, str10, sqlcommand, string.Empty, GetDefaultAccount(dbAccess, "EXR2"), defaultCurrency);
                        }
                    }
                    continue;
                Label_0315:
                    str7 = "-exramt";
                    str2 = "SELECT coy,SUM(" + str7 + ")*(CASE WHEN SUM(" + str7 + ")>0 THEN 1 ELSE 0 END) AS oridebit,SUM(" + str7 + ")*(CASE WHEN SUM(" + str7 + ")<0 THEN -1 ELSE 0 END) AS oricredit,SUM(" + str7 + ") AS oriamt, SUM(" + str7 + ") AS postamt";
                    str6 = " HAVING SUM(" + str7 + ")<>0";
                    sqlcommand = str2 + " FROM [" + str10 + "]" + str5 + str6;
                    PostGLsum(dbAccess, str10, sqlcommand, string.Empty, GetDefaultAccount(dbAccess, "EXR3"), defaultCurrency);
                    continue;
                Label_0400:
                    str7 = "exramt";
                    str2 = "SELECT coy,SUM(" + str7 + ")*(CASE WHEN SUM(" + str7 + ")>0 THEN 1 ELSE 0 END) AS oridebit,SUM(" + str7 + ")*(CASE WHEN SUM(" + str7 + ")<0 THEN -1 ELSE 0 END) AS oricredit,SUM(" + str7 + ") AS oriamt, SUM(" + str7 + ") AS postamt";
                    str6 = " HAVING SUM(" + str7 + ")<>0";
                    sqlcommand = str2 + " FROM [" + str10 + "] " + str5 + str6;
                    PostGLsum(dbAccess, str10, sqlcommand, string.Empty, GetDefaultAccount(dbAccess, "EXR1"), defaultCurrency);
                    continue;
                Label_04EB:
                    str7 = "gstamt";
                    str2 = "SELECT coy,SUM(" + str7 + ")*(CASE WHEN SUM(" + str7 + ")>0 THEN 1 ELSE 0 END) AS oridebit,SUM(" + str7 + ")*(CASE WHEN SUM(" + str7 + ")<0 THEN -1 ELSE 0 END) AS oricredit,SUM(" + str7 + ") AS oriamt, SUM(" + str7 + ") AS postamt";
                    str6 = " HAVING SUM(" + str7 + ")<>0";
                    sqlcommand = str2 + " FROM [" + str10 + "] " + str5 + str6;
                    PostGLsum(dbAccess, str10, sqlcommand, string.Empty, GetDefaultAccount(dbAccess, "GST2"), defaultCurrency);
                    str7 = "cosamt";
                    str2 = "SELECT coy,SUM(" + str7 + ")*(CASE WHEN SUM(" + str7 + ")>0 THEN 1 ELSE 0 END) AS oridebit,SUM(" + str7 + ")*(CASE WHEN SUM(" + str7 + ")<0 THEN -1 ELSE 0 END) AS oricredit,SUM(" + str7 + ") AS oriamt, SUM(" + str7 + ") AS postamt";
                    str6 = " HAVING SUM(" + str7 + ")<>0";
                    sqlcommand = str2 + " FROM [" + str10 + "] " + str5 + str6;
                    PostGLsum(dbAccess, str10, sqlcommand, string.Empty, GetDefaultAccount(dbAccess, "COS"), defaultCurrency);
                    str7 = "-cosamt";
                    str2 = "SELECT coy,SUM(" + str7 + ")*(CASE WHEN SUM(" + str7 + ")>0 THEN 1 ELSE 0 END) AS oridebit,SUM(" + str7 + ")*(CASE WHEN SUM(" + str7 + ")<0 THEN -1 ELSE 0 END) AS oricredit,SUM(" + str7 + ") AS oriamt, SUM(" + str7 + ") AS postamt";
                    str6 = " HAVING SUM(" + str7 + ")<>0";
                    sqlcommand = str2 + " FROM [" + str10 + "] " + str5 + str6;
                    PostGLsum(dbAccess, str10, sqlcommand, string.Empty, GetDefaultAccount(dbAccess, "MAT"), defaultCurrency);
                    continue;
                Label_07A2:
                    str7 = "gstamt";
                    str2 = "SELECT coy,SUM(" + str7 + ")*(CASE WHEN SUM(" + str7 + ")>0 THEN 1 ELSE 0 END) AS oridebit,SUM(" + str7 + ")*(CASE WHEN SUM(" + str7 + ")<0 THEN -1 ELSE 0 END) AS oricredit,SUM(" + str7 + ") AS oriamt, SUM(" + str7 + ") AS postamt";
                    str6 = " HAVING SUM(" + str7 + ")<>0";
                    sqlcommand = str2 + " FROM [" + str10 + "] " + str5 + " " + str6;
                    PostGLsum(dbAccess, str10, sqlcommand, string.Empty, GetDefaultAccount(dbAccess, "GST1"), defaultCurrency);
                }
                decimal num = 0M;
                foreach (DataRow row2 in dataTable.Rows)
                {
                    if (row2.RowState != DataRowState.Deleted)
                    {
                        num += (decimal)row2["postamt"];
                    }
                }
                if (num != 0M)
                {
                    DataRow row3 = dataTable.Rows.Add(new object[0]);
                    row3["accnum"] = GetDefaultAccount(dbAccess, "ROUND");
                    if (-num >= 0M)
                    {
                        row3["oricredit"] = 0;
                        row3["oridebit"] = -num;
                    }
                    else
                    {
                        row3["oricredit"] = num;
                        row3["oridebit"] = 0;
                    }
                    row3["oriamt"] = -num;
                    row3["postamt"] = -num;
                    row3["lgr"] = "GLD";
                }
                foreach (DataRow row4 in dataTable.Rows)
                {
                    if (row4.RowState != DataRowState.Deleted)
                    {
                        BizFunctions.UpdateDataRow(dataRowFrom, row4);
                        if (row4["detail"].ToString().Trim() == string.Empty)
                        {
                            row4["detail"] = dataRowFrom["detail"];
                        }
                    }
                }
            }
            catch (Exception exception)
            {
                MessageBox.Show(exception.Message + "\n" + exception.StackTrace, "Bizpoint International Pte Ltd", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
        }

        private static void PostGLsum(DBAccess dbAccess, string tableName, string sqlcommand, string groupByClauseEnd)
        {
            PostGLsum(dbAccess, tableName, sqlcommand, groupByClauseEnd, "", "");
        }

        private static void PostGLsum(DBAccess dbAccess, string tableName, string sqlcommand, string groupByClauseEnd, string accnum, string oricur)
        {
            try
            {
                DataTable table = dbAccess.DataSet.Tables["gld"];
                DataTable table2 = BizFunctions.ExecuteQuery(dbAccess.DataSet, sqlcommand);
                if (!table2.Columns.Contains("lgr"))
                {
                    table2.Columns.Add("lgr");
                }
                foreach (DataRow row in table2.Rows)
                {
                    row["lgr"] = tableName.ToUpper();
                }
                foreach (DataRow row2 in table2.Rows)
                {
                    if (row2.RowState != DataRowState.Deleted)
                    {
                        DataRow dataRowTo = table.Rows.Add(new object[0]);
                        if ((accnum.Trim() == string.Empty) && (oricur.Trim() == string.Empty))
                        {
                            BizFunctions.UpdateDataRow(row2, dataRowTo, "accnum/oricur/ccnum");
                        }
                        else
                        {
                            dataRowTo["accnum"] = accnum;
                            dataRowTo["oricur"] = oricur;
                        }
                        BizFunctions.UpdateDataRow(row2, dataRowTo, groupByClauseEnd);
                        BizFunctions.UpdateDataRow(row2, dataRowTo, "oricredit/oridebit/oriamt/postamt/lgr");
                    }
                }
            }
            catch (Exception exception)
            {
                MessageBox.Show(exception.Message + "\n" + exception.StackTrace, "Bizpoint International Pte Ltd", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
        }

        public static void PostSubLgr(DBAccess dbAccess, string fromTable, string subLedgerTable, string headerRow)
        {
            PostSubLgr(dbAccess, fromTable, subLedgerTable, headerRow, "");
        }

        public static void PostSubLgr(DBAccess dbAccess, string fromTable, string subLedgerTable, string headerRow, string extraGrouping)
        {
            if ((!dbAccess.DataSet.Tables.Contains(subLedgerTable) || !dbAccess.DataSet.Tables.Contains(fromTable)) || !dbAccess.DataSet.Tables.Contains(headerRow))
            {
                MessageBox.Show(fromTable + " or " + subLedgerTable + " or " + headerRow + " does not exist in the DataSet!", "Bizpoint International Pte Ltd", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
            else if (((subLedgerTable.ToUpper() != "ARD") && (subLedgerTable.ToUpper() != "APD")) && (subLedgerTable.ToUpper() != "CSH"))
            {
                MessageBox.Show(subLedgerTable + " is not a Sub-Ledger!", "Bizpoint International Pte Ltd", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
            else
            {
                try
                {
                    string str8;
                    string str9;
                    BizFunctions.DeleteAllRows(dbAccess.DataSet.Tables[subLedgerTable]);
                    string str = null;
                    string str2 = (extraGrouping.Trim() == string.Empty) ? "" : ("," + extraGrouping);
                    string str3 = "GROUP BY ccnum" + str2;
                    string str4 = null;
                    string sqlCommand = null;
                    string fieldsToUpdate = null;
                    string str7 = null;
                    if (((str8 = fromTable.ToUpper()) != null) && (str8 == "SIV1"))
                    {
                        str = "SELECT ccnum,SUM(-oriamt-origstamt) AS oriamt,SUM(-postamt-gstamt) AS postamt,SUM(-gstamt) AS gstamt,SUM((-oriamt-origstamt)*(case when (oriamt)>0 then 1 else 0 end)) AS oricredit,SUM((-oriamt-origstamt)*(case when (oriamt)>0 then 0 else 1 end)) AS oridebit" + str2;
                        str4 = " HAVING SUM(-oriamt-origstamt) !=0 OR SUM(-postamt-gstamt) !=0 OR SUM(-gstamt) !=0";
                    }
                    sqlCommand = str + " FROM [" + fromTable + "] " + str3 + str4;
                    DataTable table = BizFunctions.ExecuteQuery(dbAccess.DataSet, sqlCommand);
                    if (((str9 = subLedgerTable.ToUpper()) != null) && (str9 == "ARD"))
                    {
                        fieldsToUpdate = "arnum/docunum/accnum/oricur/invnum";
                        str7 = "ccnum/oriamt/postamt/gstamt/oricredit/oridebit";
                    }
                    DataTable table2 = dbAccess.DataSet.Tables[subLedgerTable];
                    DataRow dataRowFrom = dbAccess.DataSet.Tables[headerRow].Rows[0];
                    foreach (DataRow row2 in table.Rows)
                    {
                        if (row2.RowState != DataRowState.Deleted)
                        {
                            DataRow dataRowTo = table2.Rows.Add(new object[0]);
                            BizFunctions.UpdateDataRow(dataRowFrom, dataRowTo);
                            BizFunctions.UpdateDataRow(dataRowFrom, dataRowTo, fieldsToUpdate);
                            BizFunctions.UpdateDataRow(row2, dataRowTo, str7);
                            BizFunctions.UpdateDataRow(row2, dataRowTo, extraGrouping);
                        }
                    }
                }
                catch (Exception exception)
                {
                    MessageBox.Show(exception.Message + "\n" + exception.StackTrace, "Bizpoint International Pte Ltd", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                }
            }
        }

        public static void RefreshAccType(DBAccess dbAccess, string tableName)
        {
            if (tableName.Trim() != string.Empty)
            {
                try
                {
                    DataTable table = dbAccess.DataSet.Tables[tableName];
                    foreach (DataRow row in table.Rows)
                    {
                        if (row.RowState != DataRowState.Deleted)
                        {
                            string str = "acm";
                            if (Convert.ToBoolean(Common.DEFAULT_SYSTEM_TABLEINFO["ACM"]))
                            {
                                str = "acm" + Common.DEFAULT_SYSTEM_YEAR;
                            }
                            DataSet set = dbAccess.ReadSQLTemp("BizAcmTmp", "SELECT accnum,accname,acctype FROM " + str + " WHERE accnum='" + row["accnum"].ToString().Trim() + "'");
                            if (set.Tables["BizAcmTmp"].Rows.Count != 0)
                            {
                                row["acctype"] = set.Tables["BizAcmTmp"].Rows[0]["acctype"];
                            }
                        }
                    }
                }
                catch (Exception exception)
                {
                    MessageBox.Show(exception.Message + "\n" + exception.StackTrace, "Bizpoint International Pte Ltd", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                }
            }
        }
    }
}
