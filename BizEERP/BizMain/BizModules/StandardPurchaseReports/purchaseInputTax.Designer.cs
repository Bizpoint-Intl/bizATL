//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8009
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ATL.BizModules.StandardPurchaseReports {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("purchaseInputTax")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class purchaseInputTax : global::System.Data.DataSet {
        
        private piv1DataTable tablepiv1;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public purchaseInputTax() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected purchaseInputTax(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["piv1"] != null)) {
                    base.Tables.Add(new piv1DataTable(ds.Tables["piv1"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public piv1DataTable piv1 {
            get {
                return this.tablepiv1;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            purchaseInputTax cln = ((purchaseInputTax)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["piv1"] != null)) {
                    base.Tables.Add(new piv1DataTable(ds.Tables["piv1"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablepiv1 = ((piv1DataTable)(base.Tables["piv1"]));
            if ((initTable == true)) {
                if ((this.tablepiv1 != null)) {
                    this.tablepiv1.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "purchaseInputTax";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/purchaseInputTax.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablepiv1 = new piv1DataTable();
            base.Tables.Add(this.tablepiv1);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializepiv1() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            purchaseInputTax ds = new purchaseInputTax();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void piv1RowChangeEventHandler(object sender, piv1RowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class piv1DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnperiod;
            
            private global::System.Data.DataColumn columntrandate;
            
            private global::System.Data.DataColumn columnapnum;
            
            private global::System.Data.DataColumn columnapname;
            
            private global::System.Data.DataColumn columninvnum;
            
            private global::System.Data.DataColumn columnoricur;
            
            private global::System.Data.DataColumn columnsitenum;
            
            private global::System.Data.DataColumn columnGrossAmount;
            
            private global::System.Data.DataColumn columnInvoiceAmount;
            
            private global::System.Data.DataColumn columnInvoiceGstAmount;
            
            private global::System.Data.DataColumn columnBaseGrossAmount;
            
            private global::System.Data.DataColumn columnBaseGstAmount;
            
            private global::System.Data.DataColumn columnBaseInvoiceAmount;
            
            private global::System.Data.DataColumn columnrefnum;
            
            private global::System.Data.DataColumn columngstgroup;
            
            private global::System.Data.DataColumn columngstper;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public piv1DataTable() {
                this.TableName = "piv1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal piv1DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected piv1DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn periodColumn {
                get {
                    return this.columnperiod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn trandateColumn {
                get {
                    return this.columntrandate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn apnumColumn {
                get {
                    return this.columnapnum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn apnameColumn {
                get {
                    return this.columnapname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invnumColumn {
                get {
                    return this.columninvnum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn oricurColumn {
                get {
                    return this.columnoricur;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sitenumColumn {
                get {
                    return this.columnsitenum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrossAmountColumn {
                get {
                    return this.columnGrossAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvoiceAmountColumn {
                get {
                    return this.columnInvoiceAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvoiceGstAmountColumn {
                get {
                    return this.columnInvoiceGstAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseGrossAmountColumn {
                get {
                    return this.columnBaseGrossAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseGstAmountColumn {
                get {
                    return this.columnBaseGstAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseInvoiceAmountColumn {
                get {
                    return this.columnBaseInvoiceAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn refnumColumn {
                get {
                    return this.columnrefnum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gstgroupColumn {
                get {
                    return this.columngstgroup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gstperColumn {
                get {
                    return this.columngstper;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public piv1Row this[int index] {
                get {
                    return ((piv1Row)(this.Rows[index]));
                }
            }
            
            public event piv1RowChangeEventHandler piv1RowChanging;
            
            public event piv1RowChangeEventHandler piv1RowChanged;
            
            public event piv1RowChangeEventHandler piv1RowDeleting;
            
            public event piv1RowChangeEventHandler piv1RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addpiv1Row(piv1Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public piv1Row Addpiv1Row(
                        int period, 
                        System.DateTime trandate, 
                        string apnum, 
                        string apname, 
                        string invnum, 
                        string oricur, 
                        string sitenum, 
                        decimal GrossAmount, 
                        decimal InvoiceAmount, 
                        decimal InvoiceGstAmount, 
                        decimal BaseGrossAmount, 
                        decimal BaseGstAmount, 
                        decimal BaseInvoiceAmount, 
                        string refnum, 
                        string gstgroup, 
                        decimal gstper) {
                piv1Row rowpiv1Row = ((piv1Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        period,
                        trandate,
                        apnum,
                        apname,
                        invnum,
                        oricur,
                        sitenum,
                        GrossAmount,
                        InvoiceAmount,
                        InvoiceGstAmount,
                        BaseGrossAmount,
                        BaseGstAmount,
                        BaseInvoiceAmount,
                        refnum,
                        gstgroup,
                        gstper};
                rowpiv1Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowpiv1Row);
                return rowpiv1Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                piv1DataTable cln = ((piv1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new piv1DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnperiod = base.Columns["period"];
                this.columntrandate = base.Columns["trandate"];
                this.columnapnum = base.Columns["apnum"];
                this.columnapname = base.Columns["apname"];
                this.columninvnum = base.Columns["invnum"];
                this.columnoricur = base.Columns["oricur"];
                this.columnsitenum = base.Columns["sitenum"];
                this.columnGrossAmount = base.Columns["GrossAmount"];
                this.columnInvoiceAmount = base.Columns["InvoiceAmount"];
                this.columnInvoiceGstAmount = base.Columns["InvoiceGstAmount"];
                this.columnBaseGrossAmount = base.Columns["BaseGrossAmount"];
                this.columnBaseGstAmount = base.Columns["BaseGstAmount"];
                this.columnBaseInvoiceAmount = base.Columns["BaseInvoiceAmount"];
                this.columnrefnum = base.Columns["refnum"];
                this.columngstgroup = base.Columns["gstgroup"];
                this.columngstper = base.Columns["gstper"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnperiod = new global::System.Data.DataColumn("period", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnperiod);
                this.columntrandate = new global::System.Data.DataColumn("trandate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntrandate);
                this.columnapnum = new global::System.Data.DataColumn("apnum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnapnum);
                this.columnapname = new global::System.Data.DataColumn("apname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnapname);
                this.columninvnum = new global::System.Data.DataColumn("invnum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvnum);
                this.columnoricur = new global::System.Data.DataColumn("oricur", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoricur);
                this.columnsitenum = new global::System.Data.DataColumn("sitenum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsitenum);
                this.columnGrossAmount = new global::System.Data.DataColumn("GrossAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrossAmount);
                this.columnInvoiceAmount = new global::System.Data.DataColumn("InvoiceAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvoiceAmount);
                this.columnInvoiceGstAmount = new global::System.Data.DataColumn("InvoiceGstAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvoiceGstAmount);
                this.columnBaseGrossAmount = new global::System.Data.DataColumn("BaseGrossAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseGrossAmount);
                this.columnBaseGstAmount = new global::System.Data.DataColumn("BaseGstAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseGstAmount);
                this.columnBaseInvoiceAmount = new global::System.Data.DataColumn("BaseInvoiceAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseInvoiceAmount);
                this.columnrefnum = new global::System.Data.DataColumn("refnum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrefnum);
                this.columngstgroup = new global::System.Data.DataColumn("gstgroup", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngstgroup);
                this.columngstper = new global::System.Data.DataColumn("gstper", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngstper);
                this.columnapnum.Caption = "arnum";
                this.columnapname.Caption = "arname";
                this.columnGrossAmount.DefaultValue = ((decimal)(0m));
                this.columnBaseGrossAmount.DefaultValue = ((decimal)(0m));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public piv1Row Newpiv1Row() {
                return ((piv1Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new piv1Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(piv1Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.piv1RowChanged != null)) {
                    this.piv1RowChanged(this, new piv1RowChangeEvent(((piv1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.piv1RowChanging != null)) {
                    this.piv1RowChanging(this, new piv1RowChangeEvent(((piv1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.piv1RowDeleted != null)) {
                    this.piv1RowDeleted(this, new piv1RowChangeEvent(((piv1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.piv1RowDeleting != null)) {
                    this.piv1RowDeleting(this, new piv1RowChangeEvent(((piv1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removepiv1Row(piv1Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                purchaseInputTax ds = new purchaseInputTax();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "piv1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class piv1Row : global::System.Data.DataRow {
            
            private piv1DataTable tablepiv1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal piv1Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablepiv1 = ((piv1DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int period {
                get {
                    try {
                        return ((int)(this[this.tablepiv1.periodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'period\' in table \'piv1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepiv1.periodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime trandate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablepiv1.trandateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'trandate\' in table \'piv1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepiv1.trandateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string apnum {
                get {
                    try {
                        return ((string)(this[this.tablepiv1.apnumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'apnum\' in table \'piv1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepiv1.apnumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string apname {
                get {
                    try {
                        return ((string)(this[this.tablepiv1.apnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'apname\' in table \'piv1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepiv1.apnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string invnum {
                get {
                    try {
                        return ((string)(this[this.tablepiv1.invnumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'invnum\' in table \'piv1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepiv1.invnumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string oricur {
                get {
                    try {
                        return ((string)(this[this.tablepiv1.oricurColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'oricur\' in table \'piv1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepiv1.oricurColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sitenum {
                get {
                    try {
                        return ((string)(this[this.tablepiv1.sitenumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sitenum\' in table \'piv1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepiv1.sitenumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrossAmount {
                get {
                    try {
                        return ((decimal)(this[this.tablepiv1.GrossAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrossAmount\' in table \'piv1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepiv1.GrossAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal InvoiceAmount {
                get {
                    try {
                        return ((decimal)(this[this.tablepiv1.InvoiceAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InvoiceAmount\' in table \'piv1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepiv1.InvoiceAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal InvoiceGstAmount {
                get {
                    try {
                        return ((decimal)(this[this.tablepiv1.InvoiceGstAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InvoiceGstAmount\' in table \'piv1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepiv1.InvoiceGstAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseGrossAmount {
                get {
                    try {
                        return ((decimal)(this[this.tablepiv1.BaseGrossAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseGrossAmount\' in table \'piv1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepiv1.BaseGrossAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseGstAmount {
                get {
                    try {
                        return ((decimal)(this[this.tablepiv1.BaseGstAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseGstAmount\' in table \'piv1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepiv1.BaseGstAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BaseInvoiceAmount {
                get {
                    try {
                        return ((decimal)(this[this.tablepiv1.BaseInvoiceAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseInvoiceAmount\' in table \'piv1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepiv1.BaseInvoiceAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string refnum {
                get {
                    try {
                        return ((string)(this[this.tablepiv1.refnumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'refnum\' in table \'piv1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepiv1.refnumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string gstgroup {
                get {
                    try {
                        return ((string)(this[this.tablepiv1.gstgroupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gstgroup\' in table \'piv1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepiv1.gstgroupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal gstper {
                get {
                    try {
                        return ((decimal)(this[this.tablepiv1.gstperColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gstper\' in table \'piv1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepiv1.gstperColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsperiodNull() {
                return this.IsNull(this.tablepiv1.periodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetperiodNull() {
                this[this.tablepiv1.periodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstrandateNull() {
                return this.IsNull(this.tablepiv1.trandateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettrandateNull() {
                this[this.tablepiv1.trandateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsapnumNull() {
                return this.IsNull(this.tablepiv1.apnumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetapnumNull() {
                this[this.tablepiv1.apnumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsapnameNull() {
                return this.IsNull(this.tablepiv1.apnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetapnameNull() {
                this[this.tablepiv1.apnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinvnumNull() {
                return this.IsNull(this.tablepiv1.invnumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinvnumNull() {
                this[this.tablepiv1.invnumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsoricurNull() {
                return this.IsNull(this.tablepiv1.oricurColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetoricurNull() {
                this[this.tablepiv1.oricurColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssitenumNull() {
                return this.IsNull(this.tablepiv1.sitenumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsitenumNull() {
                this[this.tablepiv1.sitenumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrossAmountNull() {
                return this.IsNull(this.tablepiv1.GrossAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrossAmountNull() {
                this[this.tablepiv1.GrossAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvoiceAmountNull() {
                return this.IsNull(this.tablepiv1.InvoiceAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvoiceAmountNull() {
                this[this.tablepiv1.InvoiceAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvoiceGstAmountNull() {
                return this.IsNull(this.tablepiv1.InvoiceGstAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvoiceGstAmountNull() {
                this[this.tablepiv1.InvoiceGstAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseGrossAmountNull() {
                return this.IsNull(this.tablepiv1.BaseGrossAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseGrossAmountNull() {
                this[this.tablepiv1.BaseGrossAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseGstAmountNull() {
                return this.IsNull(this.tablepiv1.BaseGstAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseGstAmountNull() {
                this[this.tablepiv1.BaseGstAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseInvoiceAmountNull() {
                return this.IsNull(this.tablepiv1.BaseInvoiceAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseInvoiceAmountNull() {
                this[this.tablepiv1.BaseInvoiceAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrefnumNull() {
                return this.IsNull(this.tablepiv1.refnumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrefnumNull() {
                this[this.tablepiv1.refnumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgstgroupNull() {
                return this.IsNull(this.tablepiv1.gstgroupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgstgroupNull() {
                this[this.tablepiv1.gstgroupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgstperNull() {
                return this.IsNull(this.tablepiv1.gstperColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgstperNull() {
                this[this.tablepiv1.gstperColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class piv1RowChangeEvent : global::System.EventArgs {
            
            private piv1Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public piv1RowChangeEvent(piv1Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public piv1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591